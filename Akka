Akka

Why Need? 
	1. Encapsulation : In multithread system thing mess up
	2. Shared Memory : 

Heirarchial Model : 
	   Each child has one parent( the one who created it) which is also the only supevisor for this child. 
	   Default strategy is to the restart the child. Every actor that is created has /user as the ancestor. A default /system actor is created by default and only stops when /user actor i stopped.

General  Concepts :
	1. Actor Systems : Many actors together forms actor system
	   Actors are objects which encapsulate state and behavior, they communicate exclusively 
	   by exchanging messages which are placed into the recipient’s mailbox
	   A heavyweight structure ( 1..N threads), one logical app is good practice.
	   Look actors as people working on subtask to complete a big peice of work, this work is managed by a manager( parent actor) 
	   who handle all these actors and acts aptly if anyone fails to deliver the work.
	   Look at actor-model in terms of heirarchial model, only the better fruits will start to ripe.
	   Use immutable messages
	   Each actor is only has 300 Bytes of overhead, which is very less, hence a actor system can have millions of actors.

	2. Actor : An actor is a container for State, Behavior, a Mailbox, Child Actors and a Supervisor Strategy. 
			   ActorReference is the encapsulation of all this info.
			   1. State : counter, set of listeners, pending requests, etc. Having inconsistent state is fatal, hence when actor is restarted
			    		  its state is refreshed ( although actor state can be persisted as well ) .
			   2. Behaviour :  very time a message is processed, it is matched against the current behavior of the actor. 
			   				   (runtime behaviour can be modified using become and unbecome)
			   3. Mailbox : The piece which connects sender and receiver is the actor’s mailbox: 
			   				each actor has exactly one mailbox to which all senders enqueue their messages.  
			   				the default being a FIFO:
			   4. Child Actors : Every actor is supervisor to the actor(child) it has created.
			   					 parent also mantains the list of all the child actors.
			   5. Supervior Strategy : One per parent actor, this is how the failures of the child be handled.
			   Once the actor fails, it frees up the resources and drains all remaining messages from its mailbox into the system’s “dead letter mailbox” which will forward them to the EventStream as DeadLetters

	3. Supervision and monitoring:
		For type:
			1. Resume
			2. Restart
			3. Shutdown the child
			4. Shutdown itself and escalate
		To communicate failure messages a different system mailbox is used.
		Monitoring : Monitor the actors if they are terminated, context.watch(ref)

	4. Actor Ref , Paths : 
		Can create actor reference in two ways : 
			1. .actorOf()
			2. .actorSelection()
		Actor has access to following references :
			1. self
			2. system
			3. parent
			4. child
			5. path
			6. sender
		While sending the message self is also inserted implicilty with the message to have reference to sender of the message.
		Following are the important actors:
			1. /user :  the guardian actor for all user-created top-level actors
			2. /system : the guardian actor for all system-created top-level actor
			3. /deadletter : where all messages sent to stopped or non-existing actors are re-routed 
			4. /temp

	5. Akka and JVM Memory Model :

	6. 




